# gitのインストール
- name: Install git
  become: true
  yum:
    name: git
    state: latest
    lock_timeout: 180

- name: Check app installed
  stat:
    path: /home/ec2-user/raisetech-live8-sample-app
  register: app_installed

- name: Git clone sample app
  become_user: ec2-user
  ansible.builtin.git:
    repo: https://github.com/yuta-ushijima/raisetech-live8-sample-app.git
    dest: /home/ec2-user/raisetech-live8-sample-app
  when: not app_installed.stat.exists

- name: Update yum cache
  yum:
    name: "*"
    state: latest
  become: true

- name: Install prerequisites
  yum:
    name: "{{ item }}"
    state: present
  become: true
  loop:
    - gcc-c++
    - glibc-headers
    - openssl-devel
    - readline
    - libyaml-devel
    - readline-devel
    - zlib
    - zlib-devel
    - libffi-devel
    - libxml2
    - libxslt
    - libxml2-devel
    - libxslt-devel
    - sqlite-devel
    - libpng-devel
    - libjpeg-devel
    - libtiff-devel
    - gcc
    - mysql-devel
    - patch
    - libicu-devel
    - ImageMagick
    - ImageMagick-devel
    - libcurl
    - libcurl-devel
    - curl

- name: Download and install Node.js
  get_url:
    url: "https://nodejs.org/dist/v14.15.0/node-v14.15.0-linux-x64.tar.gz"
    dest: "/tmp/node-v14.15.0-linux-x64.tar.gz"
  become: true

- name: Extract Node.js
  unarchive:
    src: "/tmp/node-v14.15.0-linux-x64.tar.gz"
    dest: "/opt"
    remote_src: yes
    creates: "/opt/node-v14.15.0-linux-x64"
  become: true

- name: Create symbolic links for Node.js
  file:
    src: "/opt/node-v14.15.0-linux-x64"
    dest: "/opt/node"
    state: link
  become: true

- name: Add Node.js to PATH
  lineinfile:
    path: "/etc/profile.d/node.sh"
    line: 'export PATH="/opt/node/bin:$PATH"'
    create: yes
  become: true

- name: Install Yarn
  npm:
    name: yarn
    version: 1.22.19
    state: present
    global: yes
  become: true
  environment:
    PATH: "/opt/node/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

# rbenvのインストール
- name: read vars 
  include_vars: vars.yml

- name: install rbenv
  become: yes
  git: 
    repo: https://github.com/sstephenson/rbenv.git 
    dest: /home/ec2-user/.rbenv

- name: edit permission rbenv
  become: yes
  file:
    path: /home/ec2-user/.rbenv
    state: directory
    owner: ec2-user
    group: ec2-user

- name: Add rbenv to PATH
  lineinfile: 
    path: /home/ec2-user/.bash_profile
    line: 'export PATH="$HOME/.rbenv/bin:$PATH"'

- name: eval rbenv init
  lineinfile: 
    path: /home/ec2-user/.bash_profile
    line: 'eval "$(rbenv init -)"'

- name: rbenv setting
  shell: bash -lc "source ~/.bash_profile"

#ruby-buildのインストール 
- name: install ruby-build
  git:
    repo: https://github.com/sstephenson/ruby-build.git
    dest: /home/ec2-user/.rbenv/plugins/ruby-build

#ruby install 確認
- name: check ruby installed
  stat:
    path: /home/ec2-user/.rbenv/shims/ruby
  register: ruby_installed

#rubyのインストール
- name: install ruby
  become_user: ec2-user
  shell: bash -lc "rbenv install {{ ruby_version }}"
  when: not ruby_installed.stat.exists

#rubyを使用可能にする
- name: set default ruby version rehash
  become_user: ec2-user
  shell: bash -lc "rbenv rehash"

#インスタンスで使用するバージョンの設定
- name: set default ruby version
  become_user: ec2-user
  shell: bash -lc "rbenv global {{ ruby_version }}"

#ディレクトリの権限変更
- name: edit permission sampleapp
  file:
    path: /home/ec2-user/raisetech-live8-sample-app
    state: directory
    owner: ec2-user
    group: ec2-user
    recurse: yes

#gemのアップデート
- name: gem update
  become_user: ec2-user
  shell: bash -lc "gem update --system"  

#bundler　install
- name: install bundler 
  gem:
    name: bundler
    version: "{{ bundler_version }}"
    executable: /home/ec2-user/.rbenv/shims/gem

#gem  install
- name: gem install
  become_user: ec2-user
  ansible.builtin.command:
    cmd: bash -lc "bundle install --without development test"
    chdir: /home/ec2-user/raisetech-live8-sample-app/

#MariaDBの削除
- name: remove the MariaDB
  become: yes
  yum:
    name: mariadb-server
    state: absent

#MySQLのリポジトリを有効化
- name: install mysql  from a remote repo
  become: yes
  yum:
    name: 'https://repo.mysql.com//mysql80-community-release-el7-7.noarch.rpm'
    state: present

#新しいGPGキーをインポート
- name: Import GPG key 
  become: yes
  ansible.builtin.rpm_key:
    state: present
    key: https://repo.mysql.com/RPM-GPG-KEY-mysql-2022

- name: install mysql-community-client.x86_64
  become: yes
  yum:
    name: mysql-community-client.x86_64
    state: present

#データベース設定のファイルをコピー 　
- name: edit database.yml
  template: 
    src: database.yml
    dest: /home/ec2-user/raisetech-live8-sample-app/config/database.yml
    owner: ec2-user
    group: ec2-user


- name: dbmg
  lineinfile: >-
    dest='raisetech-live8-sample-app/config/environments/development.rb'
    state=present
    backrefs=yes
    regexp='config.file_watcher = ActiveSupport::EventedFileUpdateChecker'
    line='#config.file_watcher = ActiveSupport::EventedFileUpdateChecker'

#データベースの作成、マイグレーションの実施 
- name: Setting database
  become_user: ec2-user
  block:
  - name: Create database
    ansible.builtin.command:
      cmd: bash -lc "bundle exec rails db:create RAILS_ENV=production"
      chdir: /home/ec2-user/raisetech-live8-sample-app/
    ignore_errors: yes
  - name: Migrate database
    ansible.builtin.command:
      cmd: bash -lc "bundle exec rails db:migrate RAILS_ENV=production"
      chdir: /home/ec2-user/raisetech-live8-sample-app/
    ignore_errors: yes

#コンパイルの実施  
- name: asset precompile
  become_user: ec2-user
  ansible.builtin.command:
    cmd: bash -lc "bundle exec rails assets:precompile RAILS_ENV=production"
    chdir: /home/ec2-user/raisetech-live8-sample-app/



- name: add to file
  blockinfile:
        path: /home/ec2-user/raisetech-live8-sample-app/config/environments/development.rb
        marker: "# {mark} add to file"
        block: |
          config.hosts << "ALB-1664017378.ap-northeast-1.elb.amazonaws.com"


